// <auto-generated />
using System;
using Edunext.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Edunext.Migrations
{
    [DbContext(typeof(EdunextContext))]
    [Migration("20250318065630_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Edunext.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("ClassSlotId")
                        .HasColumnType("int")
                        .HasColumnName("class_slot_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("AssignmentId")
                        .HasName("PK__assignme__DA8918149919EB8D");

                    b.HasIndex("ClassSlotId");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.AssignmentSubmission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("submission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<string>("FileLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_link");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("grade");

                    b.Property<DateTime?>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SubmissionId")
                        .HasName("PK__assignme__9B53559592D3C123");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("assignment_submissions", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.ClassEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime?>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("enrollment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__class_en__6D24AA7A9E6BC9DA");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("class_enrollments", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.ClassSlotContent", b =>
                {
                    b.Property<int>("ClassSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_slot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassSlotId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.HasKey("ClassSlotId")
                        .HasName("PK__class_sl__D3C5C607CDFFC6B0");

                    b.HasIndex("ClassId");

                    b.HasIndex("SlotId");

                    b.ToTable("class_slot_contents", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Classroom", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("class_name");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int")
                        .HasColumnName("semester_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("ClassId")
                        .HasName("PK__classroo__FDF4798686519007");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("classrooms", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__comments__E7957687F24BEE12");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_code");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("course_name");

                    b.HasKey("CourseId")
                        .HasName("PK__courses__8F1EF7AE6535509B");

                    b.HasIndex(new[] { "CourseCode" }, "UQ__courses__AB6B45F103E2EF26")
                        .IsUnique();

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("ClassSlotId")
                        .HasColumnType("int")
                        .HasColumnName("class_slot_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime")
                        .HasColumnName("from_time");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime")
                        .HasColumnName("to_time");

                    b.HasKey("QuestionId")
                        .HasName("PK__question__2EC21549DC7B11A8");

                    b.HasIndex("ClassSlotId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slot_name");

                    b.Property<int>("SlotOrder")
                        .HasColumnType("int")
                        .HasColumnName("slot_order");

                    b.HasKey("SlotId")
                        .HasName("PK__slots__971A01BB20D271D5");

                    b.HasIndex("CourseId");

                    b.ToTable("slots", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370FA00220FC");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E6164F23AD1D8")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Edunext.Models.Assignment", b =>
                {
                    b.HasOne("Edunext.Models.ClassSlotContent", "ClassSlot")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassSlotId")
                        .IsRequired()
                        .HasConstraintName("FK__assignmen__class__5535A963");

                    b.Navigation("ClassSlot");
                });

            modelBuilder.Entity("Edunext.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("Edunext.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__assignmen__assig__59063A47");

                    b.HasOne("Edunext.Models.User", "User")
                        .WithMany("AssignmentSubmissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__assignmen__user___59FA5E80");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Edunext.Models.ClassEnrollment", b =>
                {
                    b.HasOne("Edunext.Models.Classroom", "Class")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK__class_enr__class__4222D4EF");

                    b.HasOne("Edunext.Models.User", "User")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__class_enr__user___4316F928");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Edunext.Models.ClassSlotContent", b =>
                {
                    b.HasOne("Edunext.Models.Classroom", "Class")
                        .WithMany("ClassSlotContents")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK__class_slo__class__48CFD27E");

                    b.HasOne("Edunext.Models.Slot", "Slot")
                        .WithMany("ClassSlotContents")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__class_slo__slot___49C3F6B7");

                    b.Navigation("Class");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Edunext.Models.Classroom", b =>
                {
                    b.HasOne("Edunext.Models.Course", "Course")
                        .WithMany("Classrooms")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__classroom__cours__3D5E1FD2");

                    b.HasOne("Edunext.Models.User", "Teacher")
                        .WithMany("Classrooms")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK__classroom__teach__3E52440B");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Edunext.Models.Comment", b =>
                {
                    b.HasOne("Edunext.Models.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__questi__5070F446");

                    b.HasOne("Edunext.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__user_i__5165187F");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Edunext.Models.Question", b =>
                {
                    b.HasOne("Edunext.Models.ClassSlotContent", "ClassSlot")
                        .WithMany("Questions")
                        .HasForeignKey("ClassSlotId")
                        .IsRequired()
                        .HasConstraintName("FK__questions__class__4D94879B");

                    b.Navigation("ClassSlot");
                });

            modelBuilder.Entity("Edunext.Models.Slot", b =>
                {
                    b.HasOne("Edunext.Models.Course", "Course")
                        .WithMany("Slots")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__slots__course_id__45F365D3");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Edunext.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSubmissions");
                });

            modelBuilder.Entity("Edunext.Models.ClassSlotContent", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Edunext.Models.Classroom", b =>
                {
                    b.Navigation("ClassEnrollments");

                    b.Navigation("ClassSlotContents");
                });

            modelBuilder.Entity("Edunext.Models.Course", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Edunext.Models.Question", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Edunext.Models.Slot", b =>
                {
                    b.Navigation("ClassSlotContents");
                });

            modelBuilder.Entity("Edunext.Models.User", b =>
                {
                    b.Navigation("AssignmentSubmissions");

                    b.Navigation("ClassEnrollments");

                    b.Navigation("Classrooms");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
